{"report": {"environment": {"Platform": "Linux-4.4.0-38-generic-x86_64-with-Ubuntu-16.04-xenial", "Python": "3.5.2"}, "tests": [{"setup": {"duration": 0.0004401206970214844, "outcome": "passed", "name": "setup"}, "run_index": 4, "teardown": {"duration": 0.00017118453979492188, "outcome": "passed", "name": "teardown"}, "duration": 0.03168225288391113, "call": {"duration": 0.030630826950073242, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(5)\n    def test_num_directories():\n        path = 'examples/flat'\n        output = helpers.run_and_capture(['./pytree.py', path])\n>       assert \"0 directories\" in output\nE       assert '0 directories' in 'examples/flat\\n\u251c\u2500\u2500 flatfile1.txt\\n\u251c\u2500\u2500 flatfile2.txt\\n\u2514\u2500\u2500 flatfile3.txt\\n'\n\ntests/test_flat.py:10: AssertionError", "stderr": "\n"}, "name": "tests/test_flat.py::test_num_directories", "outcome": "failed"}, {"setup": {"duration": 0.0008978843688964844, "outcome": "passed", "name": "setup"}, "run_index": 1, "teardown": {"duration": 0.0003306865692138672, "outcome": "passed", "name": "teardown"}, "duration": 0.03331732749938965, "call": {"duration": 0.031190872192382812, "outcome": "failed", "name": "call", "longrepr": "emptydir = '/tmp/tmpkbz_ht00-tree'\n\n    @pytest.mark.score(5)\n    def test_num_directories(emptydir):\n        output = helpers.run_and_capture(['./pytree.py', emptydir])\n>       assert \"0 directories\" in output\nE       assert '0 directories' in '/tmp/tmpkbz_ht00-tree\\n'\n\ntests/test_empty.py:15: AssertionError", "stderr": "\n"}, "name": "tests/test_empty.py::test_num_directories", "outcome": "failed"}, {"setup": {"duration": 0.001153707504272461, "outcome": "passed", "name": "setup"}, "run_index": 0, "teardown": {"duration": 0.0001990795135498047, "outcome": "passed", "name": "teardown"}, "duration": 0.03807473182678223, "call": {"duration": 0.0355682373046875, "outcome": "failed", "name": "call", "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4fd098a160>\n\n    @pytest.mark.score(5)\n    def test_without_path(monkeypatch):\n        monkeypatch.chdir('examples')\n        expected = helpers.run_and_capture(['tree'])\n        actual = helpers.run_and_capture(['../pytree.py'])\n>       assert expected == actual\nE       assert '.\\n\u251c\u2500\u2500 flat\\...es, 7 files\\n' == '/home/ubuntu/...mplessimple\\n'\nE         + /home/ubuntu/tree/examples\nE         + \u251c\u2500\u2500 examplesflat\nE         + \u2514\u2500\u2500 examplessimple\nE         - .\nE         - \u251c\u2500\u2500 flat\nE         - \u2502   \u251c\u2500\u2500 file1.txt\nE         - \u2502   \u251c\u2500\u2500 file2.txt\nE         - \u2502   \u2514\u2500\u2500 file3.txt\nE         - \u2514\u2500\u2500 simple\nE         -     \u251c\u2500\u2500 another\nE         -     \u251c\u2500\u2500 bites\nE         -     \u2502   \u251c\u2500\u2500 dust\nE         -     \u2502   \u2502   \u2514\u2500\u2500 dot.jpg\nE         -     \u2502   \u2514\u2500\u2500 the\nE         -     \u2514\u2500\u2500 one.txt\nE         - \nE         - 4 directories, 7 files\n\n../tests/test_all.py:10: AssertionError", "stderr": "\n\n"}, "name": "tests/test_all.py::test_without_path", "outcome": "failed"}, {"setup": {"duration": 0.0006837844848632812, "outcome": "passed", "name": "setup"}, "run_index": 2, "teardown": {"duration": 0.0003063678741455078, "outcome": "passed", "name": "teardown"}, "duration": 0.03142547607421875, "call": {"duration": 0.02975153923034668, "outcome": "failed", "name": "call", "longrepr": "emptydir = '/tmp/tmp7pv6sbkn-tree'\n\n    @pytest.mark.score(5)\n    def test_num_files(emptydir):\n        output = helpers.run_and_capture(['./pytree.py', emptydir])\n>       assert \"0 files\" in output\nE       assert '0 files' in '/tmp/tmp7pv6sbkn-tree\\n'\n\ntests/test_empty.py:21: AssertionError", "stderr": "\n"}, "name": "tests/test_empty.py::test_num_files", "outcome": "failed"}, {"setup": {"duration": 0.0004260540008544922, "outcome": "passed", "name": "setup"}, "run_index": 9, "teardown": {"duration": 0.00014591217041015625, "outcome": "passed", "name": "teardown"}, "duration": 0.031766414642333984, "call": {"duration": 0.030768394470214844, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(5)\n    def test_num_directories():\n        path = 'examples/simple'\n        output = helpers.run_and_capture(['./pytree.py', path])\n>       assert \"2 directories\" in output\nE       assert '2 directories' in 'examples/simple\\n\u251c\u2500\u2500 simpleanother\\n\u251c\u2500\u2500 simplebites\\n\u2514\u2500\u2500 simpleone.txt\\n'\n\ntests/test_simple.py:10: AssertionError", "stderr": "\n"}, "name": "tests/test_simple.py::test_num_directories", "outcome": "failed"}, {"setup": {"duration": 0.0006277561187744141, "outcome": "passed", "name": "setup"}, "run_index": 3, "teardown": {"duration": 0.00033402442932128906, "outcome": "passed", "name": "teardown"}, "duration": 0.03426027297973633, "call": {"duration": 0.03267073631286621, "outcome": "failed", "name": "call", "longrepr": "emptydir = '/tmp/tmpxv7hjlz6-tree'\n\n    @pytest.mark.score(5)\n    def test_full_output(emptydir):\n        expected = helpers.run_and_capture(['tree', emptydir])\n        actual = helpers.run_and_capture(['./pytree.py', emptydir])\n>       assert expected == actual\nE       assert '/tmp/tmpxv7h...es, 0 files\\n' == '/tmp/tmpxv7hjlz6-tree\\n'\nE           /tmp/tmpxv7hjlz6-tree\nE         - \nE         - 0 directories, 0 files\n\ntests/test_empty.py:28: AssertionError", "stderr": "\n\n"}, "name": "tests/test_empty.py::test_full_output", "outcome": "failed"}, {"setup": {"duration": 0.0004203319549560547, "outcome": "passed", "name": "setup"}, "run_index": 12, "teardown": {"duration": 0.0002892017364501953, "outcome": "passed", "name": "teardown"}, "duration": 0.03468060493469238, "call": {"duration": 0.03355073928833008, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(15)\n    def test_full_output():\n        path = 'examples/simple'\n        expected = helpers.run_and_capture(['tree', path])\n        actual = helpers.run_and_capture(['./pytree.py', path])\n>       assert expected == actual\nE       assert 'examples/sim...es, 4 files\\n' == 'examples/simp...mpleone.txt\\n'\nE           examples/simple\nE         - \u251c\u2500\u2500 another\nE         + \u251c\u2500\u2500 simpleanother\nE         ?     ++++++\nE         - \u251c\u2500\u2500 bites\nE         + \u251c\u2500\u2500 simplebites\nE         ?     ++++++\nE         - \u2502   \u251c\u2500\u2500 dust\nE         - \u2502   \u2502   \u2514\u2500\u2500 dot.jpg\nE         - \u2502   \u2514\u2500\u2500 the\nE         - \u2514\u2500\u2500 one.txt\nE         + \u2514\u2500\u2500 simpleone.txt\nE         ?     ++++++\nE         - \nE         - 2 directories, 4 files\n\ntests/test_simple.py:45: AssertionError", "stderr": "\n\n"}, "name": "tests/test_simple.py::test_full_output", "outcome": "failed"}, {"setup": {"duration": 0.0003955364227294922, "outcome": "passed", "name": "setup"}, "run_index": 7, "teardown": {"duration": 0.00015664100646972656, "outcome": "passed", "name": "teardown"}, "duration": 0.03549480438232422, "call": {"duration": 0.03454709053039551, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(15)\n    def test_full_output():\n        path = 'examples/flat'\n        expected = helpers.run_and_capture(['tree', path])\n        actual = helpers.run_and_capture(['./pytree.py', path])\n>       assert expected == actual\nE       assert 'examples/fla...es, 3 files\\n' == 'examples/flat...atfile3.txt\\n'\nE           examples/flat\nE         - \u251c\u2500\u2500 file1.txt\nE         + \u251c\u2500\u2500 flatfile1.txt\nE         ?     ++++\nE         - \u251c\u2500\u2500 file2.txt\nE         + \u251c\u2500\u2500 flatfile2.txt\nE         ?     ++++\nE         - \u2514\u2500\u2500 file3.txt\nE         + \u2514\u2500\u2500 flatfile3.txt\nE         ?     ++++\nE         - \nE         - 0 directories, 3 files\n\ntests/test_flat.py:42: AssertionError", "stderr": "\n\n"}, "name": "tests/test_flat.py::test_full_output", "outcome": "failed"}, {"setup": {"duration": 0.0004124641418457031, "outcome": "passed", "name": "setup"}, "run_index": 5, "teardown": {"duration": 0.00016355514526367188, "outcome": "passed", "name": "teardown"}, "duration": 0.03154873847961426, "call": {"duration": 0.03056025505065918, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(5)\n    def test_num_files():\n        path = 'examples/flat'\n        output = helpers.run_and_capture(['./pytree.py', path])\n>       assert \"3 files\" in output\nE       assert '3 files' in 'examples/flat\\n\u251c\u2500\u2500 flatfile1.txt\\n\u251c\u2500\u2500 flatfile2.txt\\n\u2514\u2500\u2500 flatfile3.txt\\n'\n\ntests/test_flat.py:17: AssertionError", "stderr": "\n"}, "name": "tests/test_flat.py::test_num_files", "outcome": "failed"}, {"setup": {"duration": 0.0004267692565917969, "outcome": "passed", "name": "setup"}, "run_index": 6, "teardown": {"duration": 0.00014519691467285156, "outcome": "passed", "name": "teardown"}, "duration": 0.03241682052612305, "call": {"duration": 0.0314180850982666, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(5)\n    def test_file_dir_names():\n        path = 'examples/flat'\n        output = helpers.run_and_capture(['./pytree.py', path])\n        names = re.findall('[a-z]+\\d?(?:\\.[a-z]+)?', output)\n        names.sort()\n>       assert names == [\n            'directories',\n            'examples',\n            'file1.txt',\n            'file2.txt',\n            'file3.txt',\n            'files',\n            'flat'\n        ]\nE       assert ['examples', ...latfile3.txt'] == ['directories'... 'files', ...]\nE         At index 0 diff: 'examples' != 'directories'\nE         Right contains more items, first extra item: 'files'\nE         Full diff:\nE         - ['examples', 'flat', 'flatfile1.txt', 'flatfile2.txt', 'flatfile3.txt']\nE         + ['directories',\nE         +  'examples',\nE         +  'file1.txt',\nE         +  'file2.txt',\nE         +  'file3.txt',\nE         +  'files',\nE         +  'flat']\n\ntests/test_flat.py:26: AssertionError", "stderr": "\n"}, "name": "tests/test_flat.py::test_file_dir_names", "outcome": "failed"}, {"setup": {"duration": 0.0004520416259765625, "outcome": "passed", "name": "setup"}, "run_index": 10, "teardown": {"duration": 0.0001590251922607422, "outcome": "passed", "name": "teardown"}, "duration": 0.03071427345275879, "call": {"duration": 0.029651165008544922, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(5)\n    def test_num_files():\n        path = 'examples/simple'\n        output = helpers.run_and_capture(['./pytree.py', path])\n>       assert \"4 files\" in output\nE       assert '4 files' in 'examples/simple\\n\u251c\u2500\u2500 simpleanother\\n\u251c\u2500\u2500 simplebites\\n\u2514\u2500\u2500 simpleone.txt\\n'\n\ntests/test_simple.py:17: AssertionError", "stderr": "\n"}, "name": "tests/test_simple.py::test_num_files", "outcome": "failed"}, {"setup": {"duration": 0.0004134178161621094, "outcome": "passed", "name": "setup"}, "run_index": 11, "teardown": {"duration": 0.00015211105346679688, "outcome": "passed", "name": "teardown"}, "duration": 0.030760765075683594, "call": {"duration": 0.029781818389892578, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(10)\n    def test_file_dir_names():\n        path = 'examples/simple'\n        output = helpers.run_and_capture(['./pytree.py', path])\n        names = re.findall('[a-z]+(?:\\.[a-z]+)?', output)\n        names.sort()\n>       assert names == [\n            'another',\n            'bites',\n            'directories',\n            'dot.jpg',\n            'dust',\n            'examples',\n            'files',\n            'one.txt',\n            'simple',\n            'the'\n        ]\nE       assert ['examples', ...impleone.txt'] == ['another', 'b...xamples', ...]\nE         At index 0 diff: 'examples' != 'another'\nE         Right contains more items, first extra item: 'examples'\nE         Full diff:\nE         - ['examples', 'simple', 'simpleanother', 'simplebites', 'simpleone.txt']\nE         + ['another',\nE         +  'bites',\nE         +  'directories',\nE         +  'dot.jpg',\nE         +  'dust',\nE         +  'examples',\nE         +  'files',\nE         +  'one.txt',\nE         +  'simple',\nE         +  'the']\n\ntests/test_simple.py:26: AssertionError", "stderr": "\n"}, "name": "tests/test_simple.py::test_file_dir_names", "outcome": "failed"}, {"setup": {"duration": 0.00042366981506347656, "outcome": "passed", "name": "setup"}, "run_index": 8, "teardown": {"duration": 0.000152587890625, "outcome": "passed", "name": "teardown"}, "duration": 0.03577375411987305, "call": {"duration": 0.034773826599121094, "outcome": "failed", "name": "call", "longrepr": "@pytest.mark.score(5)\n    def test_output():\n        with tempfile.TemporaryDirectory(suffix='-tree') as tmpdirname:\n            num_files = random.randint(2, 8)\n            file_numbers = random.sample(range(1, 9), num_files)\n            file_numbers.sort()\n    \n            for file_num in file_numbers:\n                path = os.path.join(tmpdirname, 'file{}.txt'.format(file_num))\n                Path(path).touch()\n    \n            expected = helpers.run_and_capture(['tree', tmpdirname])\n            actual = helpers.run_and_capture(['./pytree.py', tmpdirname])\n>           assert expected == actual\nE           assert '/tmp/tmptqw5...es, 3 files\\n' == '/tmp/tmptqw50...eefile5.txt\\n'\nE               /tmp/tmptqw50gqm-tree\nE             + \u251c\u2500\u2500 tmptqw50gqm-treefile3.txt\nE             + \u251c\u2500\u2500 tmptqw50gqm-treefile4.txt\nE             + \u2514\u2500\u2500 tmptqw50gqm-treefile5.txt\nE             - \u251c\u2500\u2500 file3.txt\nE             - \u251c\u2500\u2500 file4.txt\nE             - \u2514\u2500\u2500 file5.txt\nE             - \nE             - 0 directories, 3 files\n\ntests/test_random.py:22: AssertionError", "stderr": "\n\n"}, "name": "tests/test_random.py::test_output", "outcome": "failed"}], "summary": {"duration": 0.5258927345275879, "failed": 13, "num_tests": 13}, "created_at": "2016-10-07 00:07:04.273154"}}